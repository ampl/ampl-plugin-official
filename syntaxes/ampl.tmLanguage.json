{ "name": "ampl",
  "scopeName": "source.ampl",
  "fileTypes": ["mod", "run", ".ampl"],
  "repository": {
    "general":  {
      "patterns":  [
          {
            "include": "#linecomment"
          },
          {
            "include": "#blockcomment"
          },
          {
            "include": "#singlequotestring"
          },
          {
            "include": "#doublequotestring"
          },
          {
            "include": "#number"
          },
          {
            "include": "#keyword"
          },
          {
            "include": "#keywordlogical"
          },
          {
            "include": "#suffix"
          },
          {
            "include": "#math"
          },
          {
            "include": "#operator"
          },
          {
            "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b",
            "name": "variable.other.ampl"
          }
      ]
    },
    "linecomment":  {
      "name": "comment.line.sharp.ampl",
      "match": "(#.*)(?!\\[\\[).*$\\n?",
      "captures": { "1": { "name": "punctuation.definition.comment.gms" } }
    },
    "blockcomment":  {
      "name": "comment.slashstar.ampl",
      "begin": "/\\*",
      "end": "\\*/",
      "contentName": "comment.block.documentation.ampl"
    },
    "singlequotestring":  {
      "name": "string.quoted.single.ampl",
      "begin": "'",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.string.begin.ampl" }      },
      "end": "'",
      "endCaptures": { "0": { "name": "punctuation.definition.string.end.ampl" } },
      "patterns": [ { "match": "%(\\w+%|\\d+)", "name": "entity.name.class.ampl" } ]
    },
    "doublequotestring":  {
      "name": "string.quoted.double.ampl",
      "begin": "\"",
      "beginCaptures": { "0": { "name": "punctuation.definition.string.begin.ampl" } },
      "end": "\"",
      "endCaptures": { "0": { "name": "punctuation.definition.string.end.ampl" } },
      "patterns": [ { "match": "%(\\w+%|\\d+)", "name": "entity.name.class.ampl" } ]
    },
    "number":  {
      "name": "constant.numeric.ampl",
      "match": "\\b\\d+(\\.\\d+)?([eE]-?\\d+)?|\\.\\d+([eE]-?\\d+)?|(?i)\\b[+-]?infinity\\b"
    },
  "keyword": {
        "name": "keyword.control.ampl",
        "match": "(?<![\\w.])\\b(?:and|arc|binary|card|check|circular|close|coef|coeff|commands|cover|cross|data|default|dimen|dimension|display|drop|else|end|environ|first|fix|for|format|from|function|if|in|include|integer|last|let|maximize|member|minimize|max|min|model|net_in|net_out|next|nextw|node|not|obj|objective|option|or|ord|ord0|ordered|param|pipe|problem|prev|prevw|print|printf|product|prod|quit|repeat|reset|restore|reversed|set|shell|solution|solve|sovle|subject to|subj to|snapshot|solexpand|suffix|sum|symbolic|then|to|to_come|unfix|union|update|var|while|within|write)\\b"
      },
   "keywordlogical": {
        "name": "keyword.control.ampl",
        "match": "(?<![\\w.])\\b(?:count|atleast|atmost|exactly|forall|setof|exists|numberof|alldiff|complements)\\b"
      },
  "suffix": {
    "name": "support.function.builtin.ampl",
    "match": "\\.(?:[as]?status|defeqn|defvar|exitcode|message|result|lb[012s]?|ub[012s]?|[ul]?rc|val|init0?|body|dinit0?|[ul]?dual|[ul]?slack|suffix|slack|dual|rc|basis|message|exitcode)"
  },

 "math": {
    "name": "support.function.builtin.ampl",
    "match": "(?<!\\.)\\b(diff|difference|symdiff|inter|intersect|intersection|by|less|mod|div|abs|acos|acosh|alias|asin|asinh|atan|atan2|atanh|ceil|cos|exp|floor|log|log10|precision|round|sin|sinh|sqrt|tan|tanh|trunc|Beta|Cauchy|Exponential|Gamma|Irand224|Normal|Poisson|Uniform|Uniform01)\\b"
  },
    "operator": {
      "name": "keyword.operator.ampl",
      "match": "(\\+|-|\\*|\\/|\\*\\*|=|<=?|>=?|==|\\||\\^|<|>|!|\\.\\.|:=|&|!=|:|/|==>|<==|<==>|\\bor\\b|\\band\\b)"
    },
    "argumentcurly":  {
      "begin": "\\{",
      "patterns": [
          {
            "include": "#general"
          },
          {
            "name": "meta.function-call.arguments.ampl",
            "match": "."
          }
      ],
      "end": "\\}"
    },
    "argumentbracket":  {
      "begin": "\\[",
      "patterns": [
          {
            "include": "#general"
          },
          {

            "name": "meta.function-call.arguments.ampl",
            "match": "\\w"
          }
      ],
      "end": "\\]"
    },
    "indexing_set": {
      "name": "meta.indexing.ampl",
      "begin": "\\{",
      "beginCaptures": {
        "0": { "name": "punctuation.section.indexing.begin.ampl" }
      },
      "patterns": [
        {
          "match": "\\b(in)\\b",
          "name": "keyword.operator.set.ampl"
        },
        {
          "match": ",",
          "name": "punctuation.separator.indexing.ampl"
        },
        {
          "include": "#general"
        }
      ],
      "end": "\\}",
      "endCaptures": {
        "0": { "name": "punctuation.section.indexing.end.ampl" }
      }
    }

  
  },
  "patterns": [
      {
        "include": "#general"
      },
      {
        "include": "#argumentcurly"
      },
      {
        "include": "#argumentbracket"
      },
      {
        "include": "#indexing_set"
      }
  ],
  "uuid": "7224acbd-b663-4ec3-8a02-3e6cf1680446"
}

